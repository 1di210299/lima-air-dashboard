# Dashboard de Calidad del Aire - Lima

Sistema inteligente de monitoreo y predicción de contaminación ambiental en Lima Metropolitana

## 📊 Estado del Proyecto

### ✅ COMPLETADAS

#### Fase 1: Ingesta y almacenamiento de datos ✅

- ✅ Script de descarga automática desde portal SENAMHI
- ✅ Base de datos SQLite con tablas normalizadas
- ✅ Proceso ETL para inserción de nuevos registros sin duplicados
- ✅ Ingesta horaria programada (68MB+ de datos históricos)
- **Entregable**: Tablas pobladas con datos actualizados cada hora

#### Fase 2: Preprocesamiento y limpieza ✅

- ✅ Validación y limpieza de datos (eliminación/imputación de faltantes)
- ✅ Filtros de rango para lecturas anómalas
- ✅ Columnas derivadas: hora, día de semana, estación climática
- ✅ Series temporales agregadas por estación y distrito
- ✅ Datasets de entrenamiento generados
- **Entregable**: Dataset de series temporales listo para ML

#### Fase 3: Modelado y pronóstico ✅

- ✅ Modelos de regresión entrenados:
  - PM10: Gradient Boosting (R² = 0.6874)
  - NO2: Random Forest (R² = 0.6523)
- ✅ Modelos de clasificación para calidad del aire
- ✅ Modelos guardados y listos para inferencia
- ✅ Evaluación con métricas MAE/RMSE
- **Entregable**: Modelos ML entrenados y evaluados

#### Fase 5: Dashboard web ✅

- ✅ Frontend React con TypeScript
- ✅ Mapa interactivo con estaciones de monitoreo
- ✅ Gráficos de series temporales
- ✅ Widget de riesgo para corredores
- ✅ Interfaz responsiva y moderna
- **Entregable**: Dashboard funcional en React

### 🚧 EN PROGRESO / PENDIENTES

#### Fase 4: Backend y API 🔄

- ⏳ **EN DESARROLLO**: API REST con FastAPI/Flask
- ❌ Endpoints faltantes:
  - `GET /current?district=XXX` → medición actual + status
  - `GET /forecast?district=XXX` → pronóstico 48h
  - `GET /risk?district=XXX&age=YY&condition=ZZ` → riesgo de correr
- ❌ Cálculo de "riesgo de correr" personalizado
- ❌ Documentación API (Swagger/OpenAPI)
- **Prioridad**: ALTA - Necesario para conectar frontend con ML

#### Fase 6: Sistema de notificaciones ⚠️

- ❌ **FALTA COMPLETAMENTE**
- ❌ Integración con Twilio (WhatsApp/SMS)
- ❌ Base de datos de suscriptores
- ❌ Sistema de alertas automáticas
- ❌ Endpoints POST /subscribe y /unsubscribe
- ❌ Scheduler para envío de notificaciones
- **Prioridad**: MEDIA - Valor agregado importante

#### Fase 7: Despliegue y monitoreo ⚠️

- ❌ Contenedorización con Docker
- ❌ Despliegue en cloud (AWS/Heroku/DigitalOcean)
- ❌ Dominio y HTTPS
- ❌ Monitoreo y logs (Prometheus/Grafana)
- **Prioridad**: BAJA - Para producción

---

## 🎯 Oportunidades de Negocio Identificadas

### 1. **App de alertas y consejos personalizados**

- ✅ Base técnica: Dashboard + modelos ML listos
- 🔄 Falta: Sistema de notificaciones (Fase 6)
- 💰 Monetización: Freemium, patrocinios de mascarillas/purificadores

### 2. **Pronóstico B2B con IA**

- ✅ Modelos entrenados con R² > 0.65
- 🔄 Falta: API empresarial
- 💰 Target: Eventos, colegios, gimnasios

### 3. **Panel BI ambiental**

- ✅ Dashboard interactivo funcional
- 🔄 Falta: Personalización y white-label
- 💰 Target: Gobiernos locales, consultoras

### 4. **Chatbot de salud ambiental**

- ❌ Falta: Integración con LLM (OpenAI/Claude)
- 💰 Target: Instituciones de salud, medios

### 5. **APIs "smart city"**

- ✅ Datos procesados y modelos listos
- 🔄 Falta: APIs RESTful documentadas
- 💰 Target: Apps de movilidad, IoT, domótica

---

## 📊 Datos y Recursos

### Fuente de Datos

- **SENAMHI** - Portal Nacional de Datos Abiertos
- **Licencia**: Open Data Commons Attribution (100% pública)
- **Volumen actual**: 68MB+ datos históricos
- **Frecuencia**: Actualización horaria automática

### Tecnologías Utilizadas

- **Backend**: Python, pandas, SQLite, scikit-learn
- **Frontend**: React, TypeScript, Leaflet, Chart.js
- **ML**: Gradient Boosting, Random Forest, LightGBM
- **Infraestructura**: Git, VS Code tasks

---

## 🚀 Próximos Pasos Priorizados

### Inmediato (Esta semana)

1. **Completar API REST** (Fase 4)
   - Crear endpoints básicos con FastAPI
   - Integrar modelos ML para predicciones
   - Documentar con Swagger

### Corto plazo (2-4 semanas)

2. **Sistema de notificaciones** (Fase 6)
   - Configurar Twilio para WhatsApp/SMS
   - Base de datos de usuarios
   - Alertas automáticas por umbrales

### Mediano plazo (1-3 meses)

3. **Despliegue y monetización**
   - Dockerizar y desplegar en cloud
   - Implementar una idea de negocio piloto
   - Validar con usuarios reales

---

## 💡 Análisis de Competencia

### Plataformas Globales

- **OpenAQ**: 231M+ mediciones, 65 países
- **WAQI**: Mapa global en tiempo real
- **BreezoMeter**: Adquirida por Google (2022)

### Oportunidad Local

- **Respira Limpio**: App local, redujo exposición 76%
- **Nuestro diferencial**:
  - Datos 100% públicos (sin dependencias)
  - ML predictivo personalizado
  - Enfoque en runners/deportistas
  - Alertas proactivas inteligentes

---

## 📈 Costos Estimados

| Concepto | Costo Mensual | Observaciones |
|----------|--------------|---------------|
| **Hosting + BD** | < $50 USD | Datos livianos, tráfico moderado |
| **API Conversacional** | $10-50 USD | ~1K consultas/mes (OpenAI) |
| **Twilio (SMS/WhatsApp)** | $20-100 USD | Depende de volumen alertas |
| **Dominio + SSL** | $10-20 USD | Anual |
| **TOTAL** | **$90-220 USD** | Escalable según usuarios |

**ROI potencial**: Con 100 usuarios premium ($5/mes) = $500 USD/mes de ingresos.

---

## 🏗️ Arquitectura del Sistema

### Estructura del Proyecto

```
lima-air-dashboard/
├── data/                           # 68MB+ datos históricos
│   ├── data.csv                    # Dataset principal SENAMHI
│   ├── lima_air_quality.db         # Base de datos SQLite
│   └── aggregated/                 # Series temporales procesadas
├── src/
│   ├── data_ingestion/             # ✅ Descarga automática
│   ├── preprocessing/              # ✅ Limpieza de datos
│   ├── ml/                         # ✅ Modelos entrenados
│   ├── database/                   # ✅ Conexión BD
│   ├── api/                        # ❌ FALTA IMPLEMENTAR
│   └── notifications/              # ❌ FALTA IMPLEMENTAR
├── models/                         # ✅ Modelos ML guardados
├── lima-air-dashboard-frontend/    # ✅ React Dashboard
└── results/                        # ✅ Reportes y métricas
```

### Flujo de Datos

```mermaid
graph TB
    A[SENAMHI Portal] --> B[Data Ingestion]
    B --> C[SQLite DB]
    C --> D[Preprocessing]
    D --> E[ML Models]
    E --> F[API Endpoints]
    F --> G[React Dashboard]
    F --> H[Notifications]
```

---

**Estado actual**: Proyecto técnicamente sólido en **Fase 4-5**, listo para monetización con completar API y notificaciones.

**Ubicación de datos**: `/Users/juandiegogutierrezcortez/lima-air-dashboard/data/data.csv`

---

## 🔧 Cómo Ejecutar

### Prerrequisitos

- Python 3.11+
- Node.js 18+
- Git

### Backend

```bash
# Instalar dependencias
pip install -r requirements.txt

# Ejecutar ingesta de datos
python src/data_ingestion/downloader.py

# Entrenar modelos (opcional, ya están entrenados)
python scripts/fase3_ml_pipeline.py
```

### Frontend

```bash
cd lima-air-dashboard-frontend
npm install
npm start
```

### Tasks Disponibles

- **Ingesta de Datos - Horaria**: Descarga automática desde SENAMHI
- **Start React Dashboard**: Servidor de desarrollo frontend

---

## 📝 Licencia

Este proyecto utiliza datos públicos de SENAMHI bajo licencia Open Data Commons Attribution.
